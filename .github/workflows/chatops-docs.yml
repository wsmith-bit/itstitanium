name: ChatOps Docs (/write)

on:
  issue_comment:
    types: [created]
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  write:
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issue_comment' &&
       contains(github.event.comment.body, '/write'))
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Configure git identity
        run: |
          git config user.name  "itstitanium-bot"
          git config user.email "bot@users.noreply.github.com"

      - name: Extract ```write``` block
        id: extract
        if: github.event_name == 'issue_comment'
        env: { BODY: ${{ github.event.comment.body }} }
        run: |
          python - << 'PY'
          import os, re, sys, json, pathlib, textwrap
          body = os.environ.get('BODY','')

          m = re.search(r'```write\s*(.*?)```', body, re.S|re.M)
          if not m:
              print("::error::No fenced ```write``` block found.")
              sys.exit(1)

          # Minimal k:v parser with content: | (multiline)
          raw = m.group(1).strip().splitlines()
          cfg = {}
          key = None
          buf = []

          def push():
              if key is not None:
                  cfg[key] = "\n".join(buf).rstrip("\n")

          for line in raw:
              if re.match(r'^\s*#', line):  # comment
                  continue
              if ':' in line and not line.lstrip().startswith('|'):
                  # new key
                  push(); buf = []
                  key, val = line.split(':',1)
                  key = key.strip().lower()
                  val = val.strip()
                  if val == '|' or val == '|-':
                      cfg[key] = None
                      buf = []
                      continue
                  cfg[key] = val
              else:
                  buf.append(line)
          push()

          need = {'file','mode','content'}
          if not need.issubset(cfg.keys()):
              print("::error::write block needs: file, mode (append|replace), content: |")
              print(cfg)
              sys.exit(1)

          # Whitelist target files (prevent abuse)
          ALLOW = {'docs/OPERATIONS.md', 'README.md'}
          if cfg['file'] not in ALLOW:
              print(f"::error::Target not allowed: {cfg['file']}. Allowed: {sorted(ALLOW)}")
              sys.exit(1)

          pathlib.Path('/tmp/write.json').write_text(json.dumps(cfg), encoding='utf-8')
          print("WROTE /tmp/write.json")
          PY

      - name: Apply write
        if: github.event_name == 'issue_comment' && hashFiles('/tmp/write.json') != ''
        run: |
          set -e
          python - << 'PY'
          import json, sys
          from pathlib import Path
          cfg = json.loads(Path('/tmp/write.json').read_text(encoding='utf-8'))
          p = Path(cfg['file'])
          p.parent.mkdir(parents=True, exist_ok=True)
          text = p.read_text(encoding='utf-8') if p.exists() else ''
          mode = cfg['mode'].strip().lower()
          content = cfg['content']
          if mode == 'append':
              if text and not text.endswith("\n"): text += "\n"
              text += content + "\n"
          elif mode == 'replace':
              text = content + "\n"
          else:
              print("::error::mode must be append or replace")
              sys.exit(1)
          p.write_text(text, encoding='utf-8')
          print(f"WROTE {p} ({mode})")
          PY
          git add -A

      - name: Commit & push branch
        run: |
          set -e
          BRANCH="docs/update-${{ github.run_id }}"
          git checkout -b "$BRANCH"
          git add -A
          git commit -m "docs: /write update by $GITHUB_ACTOR (run $GITHUB_RUN_ID)"
          git push -u origin "$BRANCH"

      - name: Open PR
        id: pr
        uses: peter-evans/create-pull-request@v6
        with:
          title: "docs: /write update (${{ github.run_id }})"
          body: "Automated doc update from comment."
          base: main
          branch: docs/update-${{ github.run_id }}

      - name: Comment back (if comment-triggered)
        if: github.event_name == 'issue_comment'
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.payload.issue?.number || context.payload.pull_request?.number;
            const prUrl = core.getInput('url') || '${{ steps.pr.outputs.pull-request-url }}';
            if (issue_number) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number,
                body: `📝 /write processed. PR → ${prUrl}`
              });
            }
